#include <stdio.h>

// 포인터 > 메모리에 주소를 다루는 데이터 타입...
//포인터 형이라고 한다.

void main() {


	int a;
	// 메모리에 4바이트 할당 / a에 주소 값을 할당한다.
	a = 40;
	printf("%p\n", &a);
	//&p 주소 값에 씀 &a는 a의 주소값을 불러온다.
	//포인터는 이와 같은 주소를 어떻게 사용하는 지이다.........

	//변수를 만들면 메모리에 할당되고 주소 값을 리턴한다.
	//C, C++에는 주소값을 저장하는 데이터 타입이 있다.

	//*pa = &a;
	//'*'가 들어가면 주소를 저장하는 타입이라는 뜻이다.*/


	//그 주소부터 1바이트 공간을 사용하는지 2바이트인지 3바이트인지 모르지...

	//그래서 데이터 타입을 명시해준다.

		int* pa = &a;

		// 공간이 얼마나 큰지 *(포인터 형지정자) pa(변수명) = &(주소값 리턴 연산자) a(대상);
		//pa를 통해서 변수 a의 공간에 접근할 수 있다..,

		printf("%d  %p\n", *pa, &*pa);

		//포인터를 사용하고 *pa같이 사용하면 이를 포인터 연산자라고 한다.
		//  *&a랑 같다.....
		//*를 붙이면 그 주소가 가지고 있는 공간을 의미한다.
		*pa = 90; //이러면 a=40;이랑 같은 의미..

		printf("%d %p\n", a,&a);

		//&a 에 저장된것은 int형
		//int형의 데이터 값을 저장하고 있는 곳의 주소 값은 int형 포인터
		//&pa 역시 int형 포인터
		//그럼 &pa의 주소값을 저장하고 있는 저장하고 있는 주소 값은 int**(인트형 포인터의 포인터)

		int** ppa = &pa;

		//&ppa의 주소값을 저장하고 있는 녀석의 공간의 주소값은 int***(인트형 포인터의포인터의 포인터)

		int*** pppa = &ppa;
		//삼차원포인터...?


		//그러면 최종으로 주소값을 가지고 있는 녀석은 어디냐?

		/**ppa == *&pa = &a
			** ppa == **&pa = *&a ==a*/


		//어디에 쓰냐?? 
			//메모리 주소를 안다는 것은 어디에서든지 그 공간에 접근할 수 있다는 것
		//한편으로 심각한 오류이다.  > 주소를 잘못 접근하면 프로그램이 종료된다.
		//그래서 다른언어에서는 주소를 사용하는 언어가 없다. > 내부적으로만 주소로 작동한다.  > java의 참조형...
		//주소로 접근하면 프로그램을 효율적으로 만들 수 있다.

		//결론적으로 > C가 가장 빠른 언어 기계어...를 뺴고..
}
